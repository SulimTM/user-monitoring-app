import streamlit as st
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
import os

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CSV_FILE = "data_history.csv"
COLUMNS = ["–î–∞—Ç–∞"] + [
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "–í–æ–¥–∏—Ç–µ–ª–∏",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
    "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "–í —Ä–∞–±–æ—Ç–µ",
]

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if os.path.exists(CSV_FILE):
        return pd.read_csv(CSV_FILE)
    else:
        df = pd.DataFrame(columns=COLUMNS)
        df.to_csv(CSV_FILE, index=False)
        return df

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# --- –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
def add_data(df, values):
    new_row = {
        "–î–∞—Ç–∞": datetime.now().strftime("%d.%m.%Y %H:%M:%S"),
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": values[0],
        "–í–æ–¥–∏—Ç–µ–ª–∏": values[1],
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": values[2],
        "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ": values[3],
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω": values[4],
        "–í —Ä–∞–±–æ—Ç–µ": values[5],
    }
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    return df

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é ---
menu = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π", "–ì—Ä–∞—Ñ–∏–∫–∏", "–ü–æ–∏—Å–∫"])

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö ---
df = load_data()
if not df.empty:
    dates = df["–î–∞—Ç–∞"].tolist()
    data_tables = [df[col].tolist() for col in df.columns[1:]]
else:
    dates = []
    data_tables = [[] for _ in range(6)]

# --- –í–∫–ª–∞–¥–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
if menu == "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")
    col1, col2 = st.columns(2)
    with col1:
        users = st.number_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", min_value=0, step=1)
        drivers = st.number_input("–í–æ–¥–∏—Ç–µ–ª–∏", min_value=0, step=1)
        done = st.number_input("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", min_value=0, step=1)
    with col2:
        canceled = st.number_input("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", min_value=0, step=1)
        not_found = st.number_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", min_value=0, step=1)
        in_progress = st.number_input("–í —Ä–∞–±–æ—Ç–µ", min_value=0, step=1)

    if st.button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å"):
        values = [users, drivers, done, canceled, not_found, in_progress]
        df = load_data()
        df = add_data(df, values)
        save_data(df)
        st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
         # –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏–π (—Å –ø–æ–º–æ—â—å—é session_state)
        st.session_state["users_input"] = 0
        st.session_state["drivers_input"] = 0
        st.session_state["done_input"] = 0
        st.session_state["canceled_input"] = 0
        st.session_state["not_found_input"] = 0
        st.session_state["in_progress_input"] = 0
# --- –í–∫–ª–∞–¥–∫–∞: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π ---
elif menu == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π":
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–≤–æ–¥–∞")
    if not df.empty:
        st.dataframe(df.style.highlight_max(axis=0), use_container_width=True)
    else:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# --- –í–∫–ª–∞–¥–∫–∞: –ì—Ä–∞—Ñ–∏–∫–∏ ---
elif menu == "–ì—Ä–∞—Ñ–∏–∫–∏":
    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", COLUMNS[1:])
    if not df.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(df["–î–∞—Ç–∞"], df[category], marker='o', linestyle='-')
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# --- –í–∫–ª–∞–¥–∫–∞: –ü–æ–∏—Å–∫ ---
elif menu == "–ü–æ–∏—Å–∫":
    st.header("üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥–≥–≥)")
    if st.button("–ù–∞–π—Ç–∏"):
        if query:
            results = df[df["–î–∞—Ç–∞"].str.contains(query)]
            if not results.empty:
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                st.dataframe(results)
            else:
                st.warning("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            st.warning("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")

# --- –ò–º–ø–æ—Ä—Ç/—ç–∫—Å–ø–æ—Ä—Ç ---
st.sidebar.markdown("### üì• –ò–º–ø–æ—Ä—Ç / üì§ –≠–∫—Å–ø–æ—Ä—Ç")
export_col, import_col = st.sidebar.columns(2)
with export_col:
    if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å CSV"):
        df.to_csv("data_export.csv", index=False)
        st.sidebar.success("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫ 'data_export.csv'")
        with open("data_export.csv", "rb") as f:
            st.sidebar.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å CSV", f.read(), file_name="data_export.csv")

with import_col:
    uploaded_file = st.sidebar.file_uploader("üìÅ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", type=["csv", "xlsx"])
    if uploaded_file:
        try:
            if uploaded_file.name.endswith(".csv"):
                new_df = pd.read_csv(uploaded_file)
            elif uploaded_file.name.endswith(".xlsx"):
                new_df = pd.read_excel(uploaded_file)
            if list(new_df.columns) != COLUMNS:
                st.sidebar.error("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞.")
            else:
                new_df.to_csv(CSV_FILE, index=False)
                st.sidebar.success("‚úÖ –î–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
        except Exception as e:
            st.sidebar.error(f"–û—à–∏–±–∫–∞: {e}")

# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
if st.checkbox("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    st.subheader("Raw Data")
    st.write(df)
