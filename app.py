# app.py
from utils.auth import init_user_db, check_user, login_form, register_form
import streamlit as st
import sqlite3
import pandas as pd
from datetime import datetime
import matplotlib.pyplot as plt
from streamlit_autorefresh import st_autorefresh

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ---
DB_FILE = "monitoring.db"

def init_data_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute(f"""
    CREATE TABLE IF NOT EXISTS records (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        –¥–∞—Ç–∞ TEXT,
        –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ INTEGER,
        –≤–æ–¥–∏—Ç–µ–ª–∏ INTEGER,
        –≤—ã–ø–æ–ª–Ω–µ–Ω–æ INTEGER,
        –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ INTEGER,
        –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å_–Ω–µ_–Ω–∞–π–¥–µ–Ω INTEGER,
        –≤_—Ä–∞–±–æ—Ç–µ INTEGER
    )
    """)
    conn.commit()
    conn.close()

def load_data():
    conn = sqlite3.connect(DB_FILE)
    try:
        df = pd.read_sql_query(
            "SELECT –¥–∞—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–æ–¥–∏—Ç–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å_–Ω–µ_–Ω–∞–π–¥–µ–Ω, –≤_—Ä–∞–±–æ—Ç–µ FROM records ORDER BY –¥–∞—Ç–∞ DESC",
            conn
        )
        df.columns = ["–î–∞—Ç–∞", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", "–í–æ–¥–∏—Ç–µ–ª–∏", "–í—ã–ø–æ–ª–Ω–µ–Ω–æ", "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", "–í —Ä–∞–±–æ—Ç–µ"]
    except Exception as e:
        st.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        df = pd.DataFrame(columns=COLUMNS)

    conn.close()
    return df

def save_data(values):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
    INSERT INTO records (–¥–∞—Ç–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –≤–æ–¥–∏—Ç–µ–ª–∏, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å_–Ω–µ_–Ω–∞–π–¥–µ–Ω, –≤_—Ä–∞–±–æ—Ç–µ)
    VALUES (?, ?, ?, ?, ?, ?, ?)
    """, values)
    conn.commit()
    conn.close()
    st.cache_data.clear()
    st.rerun()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
COLUMNS = ["–î–∞—Ç–∞"] + [
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "–í–æ–¥–∏—Ç–µ–ª–∏",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
    "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "–í —Ä–∞–±–æ—Ç–µ",
]

# --- Streamlit –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

# --- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ---
st_autorefresh(interval=5 * 1000, key="data_refresh")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î ---
init_user_db()
init_data_db()

# --- –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ ---
if "logged_in" not in st.session_state:
    choice = st.sidebar.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", ["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
    if choice == "–í—Ö–æ–¥":
        login_form()
    elif choice == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        register_form()

else:
    st.sidebar.success(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {st.session_state.username}!")
    if st.sidebar.button("–í—ã–π—Ç–∏"):
        del st.session_state["logged_in"]
        del st.session_state["username"]
        del st.session_state["role"]
        st.rerun()

    # --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (—Ä–∞–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä–æ–ª—è–º) ---
    role = st.session_state.get("role", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    st.sidebar.title("üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    show_add = st.sidebar.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ") if role == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç" else False
    show_history = st.sidebar.button("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
    show_graphs = st.sidebar.button("üìà –ì—Ä–∞—Ñ–∏–∫–∏")
    show_search = st.sidebar.button("üîç –ü–æ–∏—Å–∫")
    show_instructions = st.sidebar.button("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏")

    # --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
    if 'current_page' not in st.session_state:
        st.session_state.current_page = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π"

    if show_add:
        st.session_state.current_page = "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
    elif show_history:
        st.session_state.current_page = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π"
    elif show_graphs:
        st.session_state.current_page = "–ì—Ä–∞—Ñ–∏–∫–∏"
    elif show_search:
        st.session_state.current_page = "–ü–æ–∏—Å–∫"
    elif show_instructions:
        st.session_state.current_page = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"

    df = load_data()

    # --- –í–∫–ª–∞–¥–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
    if st.session_state.current_page == "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" and role == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç":
        st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")

        with st.form("add_data_form"):
            col1, col2 = st.columns(2)
            with col1:
                users = st.number_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", min_value=0, step=1, key="users_input")
                drivers = st.number_input("–í–æ–¥–∏—Ç–µ–ª–∏", min_value=0, step=1, key="drivers_input")
                done = st.number_input("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", min_value=0, step=1, key="done_input")
            with col2:
                canceled = st.number_input("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", min_value=0, step=1, key="canceled_input")
                not_found = st.number_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", min_value=0, step=1, key="not_found_input")
                in_progress = st.number_input("–í —Ä–∞–±–æ—Ç–µ", min_value=0, step=1, key="in_progress_input")

            submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å")

            if submitted:
                values = (
                    datetime.now().strftime("%d.%m.%y %H:%M"),
                    users, drivers, done, canceled, not_found, in_progress
                )
                save_data(values)

                # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª–µ–π
                del st.session_state["users_input"]
                del st.session_state["drivers_input"]
                del st.session_state["done_input"]
                del st.session_state["canceled_input"]
                del st.session_state["not_found_input"]
                del st.session_state["in_progress_input"]

        # --- –ß–µ–∫–±–æ–∫—Å: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å ---
        show_last_records = st.checkbox("üìú –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å")

        if show_last_records:
            df_today = df.copy()
            if not df_today.empty and '–î–∞—Ç–∞' in df_today.columns:
                today = datetime.now().strftime("%d.%m.%y")
                df_today['–î–∞—Ç–∞_–¥–∞—Ç–∞'] = pd.to_datetime(df_today['–î–∞—Ç–∞'], format='mixed', dayfirst=True).dt.strftime('%d.%m.%y')
                today_df = df_today[df_today['–î–∞—Ç–∞_–¥–∞—Ç–∞'] == today].drop(columns=['–î–∞—Ç–∞_–¥–∞—Ç–∞'])

                if not today_df.empty:
                    st.subheader("üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
                    st.dataframe(today_df.style.highlight_max(axis=0), use_container_width=True)
                else:
                    st.info("‚ùå –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –µ—â—ë –Ω–µ—Ç.")
            else:
                st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞.")

    # --- –í–∫–ª–∞–¥–∫–∞: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π ---
    elif st.session_state.current_page == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π":
        st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–≤–æ–¥–∞")
        if not df.empty:
            st.dataframe(df.style.highlight_max(axis=0), use_container_width=True)
        else:
            st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

    # --- –í–∫–ª–∞–¥–∫–∞: –ì—Ä–∞—Ñ–∏–∫–∏ ---
    elif st.session_state.current_page == "–ì—Ä–∞—Ñ–∏–∫–∏":
        st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", COLUMNS[1:])
        if not df.empty:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(df["–î–∞—Ç–∞"], df[category], marker='o', linestyle='-')
            plt.xticks(rotation=45)
            plt.tight_layout()
            st.pyplot(fig)
        else:
            st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

    # --- –í–∫–ª–∞–¥–∫–∞: –ü–æ–∏—Å–∫ ---
    elif st.session_state.current_page == "–ü–æ–∏—Å–∫":
        st.header("üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")
        query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥)")
        if st.button("–ù–∞–π—Ç–∏"):
            if query:
                results = df[df["–î–∞—Ç–∞"].str.contains(query)]
                if not results.empty:
                    st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    st.dataframe(results)
                else:
                    st.warning("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                st.warning("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")

    # --- –í–∫–ª–∞–¥–∫–∞: –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ ---
    elif st.session_state.current_page == "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏":
        st.header("‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")

        st.markdown("""
        ## ‚ÑπÔ∏è –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        
        ### üìç –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é:
        - **‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ** ‚Äî –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É
        - **üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π** ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        - **üìà –ì—Ä–∞—Ñ–∏–∫–∏** ‚Äî –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        - **üîç –ü–æ–∏—Å–∫** ‚Äî –ø–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ
        - **‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏** ‚Äî —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ

        ### üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
        - –¢–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –≤–æ–π—Ç–∏
        - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –∏–º–µ—é—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
        """)

    else:
        st.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")
