import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder
import pandas as pd
from datetime import datetime
import os
import matplotlib.pyplot as plt

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
CSV_FILE = "data_history.csv"
COLUMNS = ["–î–∞—Ç–∞"] + [
    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏",
    "–í–æ–¥–∏—Ç–µ–ª–∏",
    "–í—ã–ø–æ–ª–Ω–µ–Ω–æ",
    "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ",
    "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
    "–í —Ä–∞–±–æ—Ç–µ",
]

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if os.path.exists(CSV_FILE):
        try:
            return pd.read_csv(CSV_FILE, encoding="utf-8-sig", on_bad_lines='skip')
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.")
            df = pd.DataFrame(columns=COLUMNS)
            df.to_csv(CSV_FILE, index=False)
            return df
    else:
        df = pd.DataFrame(columns=COLUMNS)
        df.to_csv(CSV_FILE, index=False)
        return df

# --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
def save_data(df):
    df.to_csv(CSV_FILE, index=False)

# --- –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
def add_data(df, values):
    new_row = {
        "–î–∞—Ç–∞": datetime.now().strftime("%d.%m.%y %H:%M"),
        "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏": values[0],
        "–í–æ–¥–∏—Ç–µ–ª–∏": values[1],
        "–í—ã–ø–æ–ª–Ω–µ–Ω–æ": values[2],
        "–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ": values[3],
        "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω": values[4],
        "–í —Ä–∞–±–æ—Ç–µ": values[5],
    }
    df = pd.concat([df, pd.DataFrame([new_row])], ignore_index=True)
    return df

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏ ---
def show_selectable_table(df, key="table"):
    gb = GridOptionsBuilder.from_dataframe(df)
    gb.configure_selection(selection_mode="single", use_checkbox=False)
    gb.configure_grid_options(enableCellTextSelection=True)
    grid_options = gb.build()

    response = AgGrid(
        df,
        gridOptions=grid_options,
        allow_unsafe_jscode=True,
        theme="alpine",
        height=300,
        width='100%',
        key=key,
        reload_data=False,
        update_mode="MODEL_CHANGED"
    )

    if hasattr(response, "selected_rows") and response.selected_rows is not None:
        return response.selected_rows
    elif isinstance(response, dict) and "selectedRows" in response:
        return response["selectedRows"]
    else:
        return []

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", layout="wide")
st.title("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é (–ø—Ä–æ—Å—Ç—ã–µ –∫–Ω–æ–ø–∫–∏ –≤–º–µ—Å—Ç–æ selectbox) ---
st.sidebar.title("üìå –ù–∞–≤–∏–≥–∞—Ü–∏—è")
show_add = st.sidebar.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
show_history = st.sidebar.button("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π")
show_graphs = st.sidebar.button("üìà –ì—Ä–∞—Ñ–∏–∫–∏")
show_search = st.sidebar.button("üîç –ü–æ–∏—Å–∫")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ ---
df = load_data()
if not df.empty:
    dates = df["–î–∞—Ç–∞"].tolist()
    data_tables = [df[col].tolist() for col in df.columns[1:]]
else:
    dates = []
    data_tables = [[] for _ in range(6)]

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ä–µ–∑ session_state ---
if 'current_page' not in st.session_state:
    st.session_state.current_page = "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"

# --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
if show_add:
    st.session_state.current_page = "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"
elif show_history:
    st.session_state.current_page = "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π"
elif show_graphs:
    st.session_state.current_page = "–ì—Ä–∞—Ñ–∏–∫–∏"
elif show_search:
    st.session_state.current_page = "–ü–æ–∏—Å–∫"

# --- –í–∫–ª–∞–¥–∫–∞: –î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ---
if st.session_state.current_page == "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
    st.header("‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å")

    with st.form("add_data_form"):
        col1, col2 = st.columns(2)
        with col1:
            users = st.number_input("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", min_value=0, step=1, key="users_input")
            drivers = st.number_input("–í–æ–¥–∏—Ç–µ–ª–∏", min_value=0, step=1, key="drivers_input")
            done = st.number_input("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", min_value=0, step=1, key="done_input")
        with col2:
            canceled = st.number_input("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", min_value=0, step=1, key="canceled_input")
            not_found = st.number_input("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", min_value=0, step=1, key="not_found_input")
            in_progress = st.number_input("–í —Ä–∞–±–æ—Ç–µ", min_value=0, step=1, key="in_progress_input")

        submitted = st.form_submit_button("‚úÖ –î–æ–±–∞–≤–∏—Ç—å")

        if submitted:
            values = [users, drivers, done, canceled, not_found, in_progress]
            df = load_data()
            df = add_data(df, values)
            save_data(df)
            st.success("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")

            # –£–¥–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ session_state, —á—Ç–æ–±—ã –ø–æ–ª—è –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            del st.session_state["users_input"]
            del st.session_state["drivers_input"]
            del st.session_state["done_input"]
            del st.session_state["canceled_input"]
            del st.session_state["not_found_input"]
            del st.session_state["in_progress_input"]

    # --- –ß–µ–∫–±–æ–∫—Å: –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å ---
    show_last_records = st.checkbox("üìú –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å")

    if show_last_records:
        df_today = load_data()
        today = datetime.now().strftime("%d.%m.%y")
        df_today['–î–∞—Ç–∞_–¥–∞—Ç–∞'] = pd.to_datetime(df_today['–î–∞—Ç–∞'], format='mixed', dayfirst=True).dt.strftime('%d.%m.%y')
        today_df = df_today[df_today['–î–∞—Ç–∞_–¥–∞—Ç–∞'] == today].drop(columns=['–î–∞—Ç–∞_–¥–∞—Ç–∞'])

        if not today_df.empty:
            st.subheader("üìå –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:")
            selected_row = show_selectable_table(today_df, key="today_table")
            if len(selected_row) > 0:
                if isinstance(selected_row, list):
                    row_data = selected_row[0]  # –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å dict
                else:
                    row_data = selected_row.iloc[0].to_dict()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º Series –≤ —Å–ª–æ–≤–∞—Ä—å

                copied_text = ' | '.join(f"{k}: {v}" for k, v in row_data.items())
                st.code(copied_text)
                st.info("‚úîÔ∏è –°—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
        else:
            st.info("‚ùå –°–µ–≥–æ–¥–Ω—è –∑–∞–ø–∏—Å–µ–π –µ—â—ë –Ω–µ—Ç.")

# --- –í–∫–ª–∞–¥–∫–∞: –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π ---
elif st.session_state.current_page == "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π":
    st.header("üìú –ò—Å—Ç–æ—Ä–∏—è –≤–≤–æ–¥–∞")
    if not df.empty:
        st.subheader("üìå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
        selected_row = show_selectable_table(df, key="history_table")
        if len(selected_row) > 0:
            if isinstance(selected_row, list):
                row_data = selected_row[0]
            else:
                row_data = selected_row.iloc[0].to_dict()

            copied_text = ' | '.join(f"{k}: {v}" for k, v in row_data.items())
            st.code(copied_text)
            st.info("‚úîÔ∏è –°—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
    else:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# --- –í–∫–ª–∞–¥–∫–∞: –ì—Ä–∞—Ñ–∏–∫–∏ ---
elif st.session_state.current_page == "–ì—Ä–∞—Ñ–∏–∫–∏":
    st.header("üìà –ì—Ä–∞—Ñ–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    category = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", COLUMNS[1:])
    if not df.empty:
        fig, ax = plt.subplots(figsize=(10, 6))
        ax.plot(df["–î–∞—Ç–∞"], df[category], marker='o', linestyle='-')
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
    else:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞.")

# --- –í–∫–ª–∞–¥–∫–∞: –ü–æ–∏—Å–∫ ---
elif st.session_state.current_page == "–ü–æ–∏—Å–∫":
    st.header("üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ")
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–¥–¥.–º–º.–≥–≥)")
    if st.button("–ù–∞–π—Ç–∏"):
        if query:
            results = df[df["–î–∞—Ç–∞"].str.contains(query)]
            if not results.empty:
                st.write("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                selected_row = show_selectable_table(results, key="search_table")
                if len(selected_row) > 0:
                    if isinstance(selected_row, list):
                        row_data = selected_row[0]
                    else:
                        row_data = selected_row.iloc[0].to_dict()

                    copied_text = ' | '.join(f"{k}: {v}" for k, v in row_data.items())
                    st.code(copied_text)
                    st.info("‚úîÔ∏è –°—Ç—Ä–æ–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!")
            else:
                st.warning("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            st.warning("‚ùó –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø–æ–∏—Å–∫–∞.")
