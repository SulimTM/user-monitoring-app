# utils/auth.py
import streamlit as st
import sqlite3
import hashlib

DB_FILE = "../monitoring.db"  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –ë–î

def init_user_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT UNIQUE,
        password TEXT,
        role TEXT DEFAULT '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
    )
    """)
    try:
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin / password ‚Üí –†–æ–ª—å: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"
        hashed_pw = hashlib.sha256("password".encode()).hexdigest()
        cursor.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
                       ("admin", hashed_pw, "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç"))
        conn.commit()
    except sqlite3.IntegrityError:
        pass  # –£–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    finally:
        conn.close()

def check_user(username, password):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT password, role FROM users WHERE username=?", (username,))
    result = cursor.fetchone()
    conn.close()
    if result and result[0] == hashlib.sha256(password.encode()).hexdigest():
        return result[1]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–æ–ª—å
    return None

def login_form():
    st.title("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")

    username = st.text_input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="login_username")
    password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_password")

    if st.button("–í–æ–π—Ç–∏"):
        role = check_user(username, password)
        if role:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.session_state.role = role
            st.rerun()
        else:
            st.error("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

def register_form():
    st.subheader("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    
    new_username = st.text_input("–ù–æ–≤–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", key="register_username")
    new_password = st.text_input("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å", type="password", key="register_password")
    confirm_password = st.text_input("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password", key="confirm_password")

    if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
        if not new_username or not new_password:
            st.error("‚ùó –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        elif new_password != confirm_password:
            st.error("‚ùå –ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        else:
            conn = sqlite3.connect(DB_FILE)
            cursor = conn.cursor()
            try:
                hashed_pw = hashlib.sha256(new_password.encode()).hexdigest()
                cursor.execute("INSERT INTO users (username, password, role) VALUES (?, ?, ?)",
                               (new_username, hashed_pw, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                conn.commit()
                st.success("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
            except sqlite3.IntegrityError:
                st.error("‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω—è—Ç–æ")
            finally:
                conn.close()
